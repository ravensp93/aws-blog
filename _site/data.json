[{"permalink":"//","layout":"default","title":"Introduction","content":"# Introduction\n\nWelcome to our repository for all cloud related documentations that we would like to share!\n","dir":"/","name":"README.md","path":"README.md","url":"/"},{"sort":1,"permalink":"/Three%20Tier%20Architecture/","layout":"default","title":"Three-Tier Infrastructure Setup","content":"<h1 id=\"1-three-tier-infrastructure-setup\">1. Three-Tier Infrastructure Setup</h1>\n<p>In this lab, learn to setup a highly redundant three-tier web application cloud infrastructure.</p>\n\n<h2 id=\"architecture\">Architecture</h2>\n<p align=\"center\">\n <img src=\"blob/aws-poc-1-arch.PNG\" />\n</p>\n\n<h2 id=\"lab\">Lab</h2>\n\n<table>\n <thead>\n <tr>\n <th>Phases</th>\n <th>Description</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td><a href=\"Lab%201\">Lab 1</a></td>\n <td>VPC &amp; Subnets</td>\n </tr>\n <tr>\n <td><a href=\"Lab%202\">Lab 2</a></td>\n <td>Bastion Host</td>\n </tr>\n <tr>\n <td><a href=\"Lab%203\">Lab 3</a></td>\n <td>Front-End Tier</td>\n </tr>\n </tbody>\n</table>\n","dir":"/Three%20Tier%20Architecture/","name":"readme.md","path":"Three Tier Architecture/readme.md","url":"/Three%20Tier%20Architecture/"},{"sort":1,"permalink":"/Three%20Tier%20Architecture/Lab%201/","layout":"default","title":"Lab 1: VPC &amp; Subnet Configuration","content":"<h1 id=\"lab-1-vpc--subnet-configuration\">Lab 1: VPC &amp; Subnet Configuration</h1>\n<ul>\n <li><a href=\"#introduction\">Introduction</a></li>\n <li><a href=\"#blueprint\">Blueprint</a></li>\n <li><a href=\"#vpc-configuration\">VPC Configuration</a></li>\n <li><a href=\"#subnet-configuration\">Subnet Configuration</a></li>\n <li><a href=\"#internet-gateway\">Internet Gateway</a></li>\n <li><a href=\"#nat-gateway\">NAT Gateway</a></li>\n <li><a href=\"#route-table-configuration\">Route Table Configuration</a></li>\n</ul>\n\n<h2 id=\"introduction\">Introduction</h2>\n<p>In this lab, we will configure a VPC network hosting public and private subnet on different availability zones. Enable access to the internet for subnets via route tables and aws gateway resources</p>\n\n<h2 id=\"blueprint\">Blueprint</h2>\n<p align=\"center\">\n <img src=\"blob/lab-1-vpc-subnet-arch.PNG\" />\n</p>\n\n<h2 id=\"vpc-configuration\">VPC Configuration</h2>\n\n<p>1) In <strong>VPC</strong> service page, navigate to <strong>Your VPCs</strong> page and click on <strong>Create VPC</strong>\n2) Tag VPC resource with a <strong>name</strong> 3-tier-vpc\n3) set <strong>IPv4 CIDR block IP</strong> to <strong>10.0.0.0/16</strong>\n4) <strong>Extra Options:</strong></p>\n<ul>\n <li><strong>IPv6 CIDR block:</strong> For assignment of IPv6 Network Address</li>\n <li><strong>Tenancy:</strong> Dedicated tenancy ensures all EC2 instances that are launched in a VPC run on hardware that’s dedicated to a single customer \n5) Click <strong>Create VPC</strong></li>\n</ul>\n\n<p align=\"center\">\n <img src=\"blob/lab-1-pic-1.PNG\" />\n</p>\n\n<h3 id=\"dns-hostname-assignment\">DNS Hostname assignment</h3>\n<p>By enabling <strong>DNS Hostnames</strong>, EC2 Instances created with public IP within this VPC will automatically be assigned a hostname.</p>\n\n<p>6) Right click the created VPC, Click on <strong>Edit DNS Hostnames</strong></p>\n<p align=\"center\">\n <img src=\"blob/lab-1-pic-2.PNG\" />\n</p>\n\n<p>7) Click <strong>Enable</strong> Checkbox and save the changes.</p>\n<p align=\"center\">\n <img src=\"blob/lab-1-pic-3.PNG\" />\n</p>\n\n<p>8) <strong>Enable DNS Hostname assignment for both PUBLIC subnets</strong></p>\n\n<h2 id=\"subnet-configuration\">Subnet Configuration</h2>\n\n<p>Create subnets to segregate resources into public and private zones. Subnets will be created in two different availability zones for\nhigh availability.</p>\n\n<table>\n <thead>\n <tr>\n <th>Name Tag</th>\n <th>IPv4 CIDR</th>\n <th>Availability Zone</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td>private-subnet-1</td>\n <td>10.0.0.0/24</td>\n <td>ap-southeast-1a</td>\n </tr>\n <tr>\n <td>private-subnet-2</td>\n <td>10.0.1.0/24</td>\n <td>ap-southeast-1b</td>\n </tr>\n <tr>\n <td>public-subnet-1</td>\n <td>10.0.2.0/24</td>\n <td>ap-southeast-1a</td>\n </tr>\n <tr>\n <td>public-subnet-2</td>\n <td>10.0.3.0/24</td>\n <td>ap-southeast-1b</td>\n </tr>\n </tbody>\n</table>\n\n<p>1) In <strong>VPC</strong> service page, navigate to <strong>Subnets</strong> page and click on <strong>Create subnet</strong></p>\n\n<p align=\"center\">\n <img src=\"blob/lab-1-pic-4.PNG\" />\n</p>\n\n<p>2) Tag Subnet with a <strong>name: private-subnet-1</strong>\n3) Select <strong>VPC:</strong> 3-tier-vpc\n4) Select <strong>Availability Zone</strong> ap-southeast-1a\n5) set <strong>IPv4 CIDR block IP</strong> to <strong>10.0.0.0/24</strong>\n6) Click <strong>Create</strong></p>\n\n<p align=\"center\">\n <img src=\"blob/lab-1-pic-5.PNG\" />\n</p>\n\n<p>7) Create the other three subnets</p>\n\n<p align=\"center\">\n <img src=\"blob/lab-1-pic-6.PNG\" />\n</p>\n\n<p><strong>Reserved Addresses for Subnets:</strong></p>\n<ul>\n <li>10.0.0.0 Network Address</li>\n <li>10.0.0.1 Reserved by AWS for the VPC router</li>\n <li>10.0.0.2 Reserved by AWS</li>\n <li>10.0.0.3: Reserved by AWS for future use</li>\n <li>10.0.0.255: Network broadcast address, but not supported by AWS in a VPC</li>\n</ul>\n\n<h2 id=\"internet-gateway\">Internet Gateway</h2>\n\n<p>Internet Gateway allows internet access to your VPC</p>\n\n<p>1) In <strong>VPC</strong> service page, navigate to <strong>Internet Gateways</strong> page and click on <strong>Create internet gateway</strong></p>\n\n<p align=\"center\">\n <img src=\"blob/lab-1-pic-10.PNG\" />\n</p>\n\n<p>2) <strong>Optional</strong> Tag Internet Gateway with a <strong>name</strong> \n3) Click <strong>Create Internet gateway</strong></p>\n\n<p align=\"center\">\n <img src=\"blob/lab-1-pic-11.PNG\" />\n</p>\n\n<p>4) Right-click the created Internet gateway and click on <strong>Attach to VPC</strong></p>\n\n<p align=\"center\">\n <img src=\"blob/lab-1-pic-12.PNG\" />\n</p>\n\n<p>5) Select <strong>Available VPC</strong> to attach to 3-tier-vpc\n6) Click on <strong>Attach Internet Gateway</strong></p>\n\n<p align=\"center\">\n <img src=\"blob/lab-1-pic-13.PNG\" />\n</p>\n\n<h2 id=\"nat-gateway\">NAT gateway</h2>\n\n<p><strong>Pre requisite: After route to internet has been configured for public subnet</strong></p>\n\n<p>NAT gateway enable instances in a private subnet to connect to the internet or other AWS service, \nbut prevent the internet from initiating a connection with those instances</p>\n\n<p>1) In <strong>VPC</strong> service page, navigate to <strong>NAT Gateways</strong> page and click on <strong>Create NAT gateway</strong></p>\n\n<p align=\"center\">\n <img src=\"blob/lab-1-pic-7.PNG\" />\n</p>\n\n<p>2) <strong>Optional</strong> Tag NAT Gateway with a <strong>name</strong> \n3) Select <strong>subnet:</strong> public-subnet-2. Selection can be either of the <strong>Public</strong> subnets\n4) Select an <strong>existing Elastic IP</strong> or click on <strong>allocate Elastic IP</strong>\n5) Click <strong>Create NAT gateway</strong></p>\n\n<p align=\"center\">\n <img src=\"blob/lab-1-pic-8.PNG\" />\n</p>\n\n<h2 id=\"route-table-configuration\">Route Table Configuration</h2>\n\n<p>Using routing tables assign to subnets, allow public and private subnets to have internet access through the VPC’s Internet gateway and the NAT gateway in the public subnet</p>\n\n<table>\n <thead>\n <tr>\n <th>Name Tag</th>\n <th>Route Configuration</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td>3-tier-pub-rt</td>\n <td>Route public subnets to access internet via Internet Gateway</td>\n </tr>\n <tr>\n <td>3-tier-priv-rt</td>\n <td>Route private subnets to access internet via NAT Gateway</td>\n </tr>\n </tbody>\n</table>\n\n<p>1) In <strong>VPC</strong> service page, navigate to <strong>Route Tables</strong> page and click on <strong>Create route table</strong></p>\n<ul>\n <li>A <strong>main</strong> Default Route table is created for every VPC. All subnet without assigned route tables will be assigned to the main default route table.</li>\n</ul>\n\n<p align=\"center\">\n <img src=\"blob/lab-1-pic-9.PNG\" />\n</p>\n\n<p>2) <strong>Optional</strong> Tag route table with a <strong>name: 3-tier-pub-rt</strong> \n3) Select <strong>VPC:</strong> &lt;3-tier-vpc&gt;\n4) Click on <strong>Create</strong>\n5) Create route table for <strong>public subnet</strong></p>\n\n<p align=\"center\">\n <img src=\"blob/lab-1-pic-15.PNG\" />\n</p>\n\n<h3 id=\"route-creation\">Route Creation</h3>\n\n<p>6) Right-click on <strong>3-tier-pub-rt</strong>, Click <strong>Edit routes</strong></p>\n\n<p align=\"center\">\n <img src=\"blob/lab-1-pic-16.PNG\" />\n</p>\n\n<p>7) Click <strong>Add route</strong>\n8) Set <strong>Destination</strong> to <strong>0.0.0.0/0</strong>, <strong>Target: Internet Gateway</strong> \n9) Click <strong>Save routes</strong></p>\n\n<p align=\"center\">\n <img src=\"blob/lab-1-pic-17.PNG\" />\n</p>\n\n<p>10) Right click on <strong>3-tier-pub-rt</strong>, select <strong>Edit subnet associations</strong></p>\n\n<p align=\"center\">\n <img src=\"blob/lab-1-pic-19.PNG\" />\n</p>\n\n<p>11) Select both the <strong>public subnets</strong>\n12) Click <strong>Save</strong></p>\n\n<p align=\"center\">\n <img src=\"blob/lab-1-pic-20.PNG\" />\n</p>\n\n<p><strong>Pre requisite: After NAT Gateway has been configured for public subnet</strong><br />\n13) Edit route for <strong>3-tier-priv-rt</strong><br />\n14) Click <strong>Add route</strong><br />\n15) Set <strong>Destination</strong> to <strong>0.0.0.0/0</strong>, <strong>Target: NAT Gateway</strong><br />\n16) Click <strong>Save routes</strong></p>\n\n<p align=\"center\">\n <img src=\"blob/lab-1-pic-18.PNG\" />\n</p>\n\n<p>17) Associate <strong>Route Table: 3-tier-priv-rt</strong> to both private subnets</p>\n\n<p align=\"center\">\n <img src=\"blob/lab-1-pic-21.PNG\" />\n</p>\n","dir":"/Three%20Tier%20Architecture/Lab%201/","name":"readme.md","path":"Three Tier Architecture/Lab 1/readme.md","url":"/Three%20Tier%20Architecture/Lab%201/"},{"sort":2,"permalink":"/Three%20Tier%20Architecture/Lab%202/","layout":"default","title":"Lab 2: Bastion Host Configuration","content":"<h1 id=\"lab-2-bastion-host-configuration\">Lab 2: Bastion Host Configuration</h1>\n<ul>\n <li><a href=\"#introduction\">Introduction</a></li>\n <li><a href=\"#blueprint\">Blueprint</a></li>\n <li><a href=\"#elastic-ip\">Elastic IP</a></li>\n <li><a href=\"#key-pair\">Key Pair</a></li>\n <li><a href=\"#security-group\">Security Group</a></li>\n <li><a href=\"#iam-policy\">IAM Policy</a></li>\n <li><a href=\"#iam-role\">IAM Role</a></li>\n <li><a href=\"#launch-template\">Launch Template</a></li>\n <li><a href=\"#auto-scaling-group\">Auto Scaling Group</a></li>\n <li><a href=\"#private-key-forwarding\">Private Key Forwarding (Putty/Pageant)</a></li>\n</ul>\n\n<h2 id=\"introduction\">Introduction</h2>\n\n<p>In this lab, we will configure a bastion host that is singly redundant by leveraging on auto-scaling group.</p>\n\n<p>A bastion host is a server whose purpose is to provide access to a private network from an external network, such as the Internet. \nBecause of its exposure to potential attack, a bastion host must minimize the chances of penetration.</p>\n\n<h2 id=\"blueprint\">Blueprint</h2>\n<p align=\"center\">\n <img src=\"blob/lab-2-pic-1.PNG\" />\n</p>\n\n<h2 id=\"elastic-ip\">Elastic IP</h2>\n\n<p>An Elastic IP address is a static IPv4 address designed for dynamic cloud computing. By using an Elastic IP address, you can mask the failure of an instance or software by rapidly remapping the address to another instance in your account. \nAn Elastic IP address is allocated to your AWS account, and is yours until you release it.</p>\n\n<p>1) In <strong>EC2</strong> service page, navigate to <strong>Elastic IPs</strong> page and click on <strong>Allocate Elastic IP address</strong></p>\n\n<p align=\"center\">\n <img src=\"blob/lab-2-pic-2.PNG\" />\n</p>\n\n<p>2) Use <strong>default options</strong> (Use Amazon’s Pool of IPv4 Addresses)\n3) Click “Allocate”</p>\n\n<p align=\"center\">\n <img src=\"blob/lab-2-pic-3.PNG\" />\n</p>\n\n<p><strong>Note: Save the IP Address for accessing the instance and resource ID for cli attachment of elastic IP onto the bastion host later</strong></p>\n\n<h2 id=\"key-pair\">Key Pair</h2>\n<p>A key pair, consisting of a private key and a public key, is a set of security credentials that you use to prove your identity when connecting to an instance.</p>\n\n<p>1) In <strong>EC2</strong> service page, navigate to <strong>Key Pairs</strong> page and click on <strong>Create Key Pair</strong></p>\n\n<p align=\"center\">\n <img src=\"blob/lab-2-pic-4.PNG\" />\n</p>\n\n<p>2) Tag VPC resource with a <strong>name:</strong> bastion-keys\n3) Select <strong>ppk</strong> file format \n4) Click <strong>Create Key Pair</strong></p>\n\n<p align=\"center\">\n <img src=\"blob/lab-2-pic-32.PNG\" />\n</p>\n\n<p><strong>Note: Key pair will be downloaded automatically on your browser, save it for accessing the bastion host later</strong></p>\n<h2 id=\"security-group\">Security Group</h2>\n<p>A security group acts as a virtual firewall for your instance to control inbound and outbound traffic. They can be attached to certain resources such as EC2\non AWS.</p>\n\n<p>1) In <strong>EC2</strong> service page, navigate to <strong>Security Group</strong> page and click on <strong>Create security group</strong></p>\n\n<p align=\"center\">\n <img src=\"blob/lab-2-pic-5.PNG\" />\n</p>\n\n<p>2) Set <strong>Security Group Name:</strong> Bastion-SecG\n3) Set <strong>Description:</strong> Allows SSH For Bastion Host\n4) Under <strong>Inbound Rules</strong>, Click <strong>Add rule</strong>\n5) Select <strong>Type:</strong> SSH, <strong>Source:</strong> Custom 0.0.0.0/0</p>\n<ul>\n <li><strong>Note: Best Practice, the source should be set as trusted IPs only.</strong>\n6) Click <strong>Create security group</strong></li>\n</ul>\n\n<p align=\"center\">\n <img src=\"blob/lab-2-pic-6.PNG\" />\n</p>\n<h2 id=\"iam-policy\">IAM Policy</h2>\n<p>A policy defines the AWS permissions that you can assign to a user, group, or role.</p>\n\n<p>In this section, we will create a policy to allow our bastion host to handle ElasticIPs resource</p>\n\n<p>1) In <strong>IAM</strong> service page, navigate to <strong>Policies</strong> page and click on <strong>Create policy</strong></p>\n\n<p align=\"center\">\n <img src=\"blob/lab-2-pic-7.PNG\" />\n</p>\n\n<p>2) Select the <strong>JSON</strong> tab, copy and paste the code below into the editor. \nThe following JSON object denotes an <strong>Allow</strong> for certain actions on other resources (e.g DisassociateAddress)</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"VisualEditor0\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ec2:ReleaseAddress\",\n                \"ec2:DisassociateAddress\",\n                \"ec2:DescribeNetworkInterfaces\",\n                \"ec2:AssociateAddress\",\n                \"ec2:AllocateAddress\"\n            ],\n            \"Resource\": \"*\"\n        }\n    ]\n}\n</code></pre>  </div></div>\n<p>3) Click <strong>Review policy</strong></p>\n\n<p align=\"center\">\n <img src=\"blob/lab-2-pic-8.PNG\" />\n</p>\n\n<p>4) Set <strong>Name:</strong> AllowEC2AccessENI\n5) Set <strong>Description:</strong> To Allow EC2 Instances to access ENI resources\n6) Click <strong>Create Policy</strong></p>\n\n<p align=\"center\">\n <img src=\"blob/lab-2-pic-9.PNG\" />\n</p>\n\n<h2 id=\"iam-role\">IAM Role</h2>\n<p>IAM roles are a secure way to grant permissions to entities that you trust. Examples of entities include the following:</p>\n<ul>\n <li>IAM user in another account</li>\n <li>Application code running on an EC2 instance that needs to perform actions on AWS resources</li>\n <li>An AWS service that needs to act on resources in your account to provide its features</li>\n <li>Users from a corporate directory who use identity federation with SAML</li>\n</ul>\n\n<p>We are going to create a role for our EC2 and attach the previously created policy to it. This will allow any EC2 instances\nattached with this role to have permission to handle elastic IPs resource</p>\n\n<p>1) In <strong>IAM</strong> service page, navigate to <strong>Roles</strong> page and click on <strong>Create Role</strong></p>\n\n<p align=\"center\">\n <img src=\"blob/lab-2-pic-10.PNG\" />\n</p>\n\n<p>2) Select <strong>Type</strong> as <strong>AWS service</strong></p>\n\n<p align=\"center\">\n <img src=\"blob/lab-2-pic-11.PNG\" />\n</p>\n\n<p>3) Choose and Select <strong>Use Case:</strong> EC2 \n4) Click <strong>Next: Permissions</strong></p>\n\n<p align=\"center\">\n <img src=\"blob/lab-2-pic-12.PNG\" />\n</p>\n\n<p>5) Attach <strong>Permissions policy:</strong> AllowEC2AccessENI</p>\n\n<p align=\"center\">\n <img src=\"blob/lab-2-pic-13.PNG\" />\n</p>\n\n<p>6) Set <strong>Role name:</strong> Bastion-ENI\n7) Set <strong>Role description:</strong> Allow EC2 Instances to access ENI resources\n8) Click <strong>Create role</strong></p>\n\n<p align=\"center\">\n <img src=\"blob/lab-2-pic-14.PNG\" />\n</p>\n\n<h2 id=\"launch-template\">Launch Template</h2>\n\n<p>1) In <strong>EC2</strong> service page, navigate to <strong>Launch Templates</strong> page and click on <strong>Create launch template</strong></p>\n\n<p align=\"center\">\n <img src=\"blob/lab-2-pic-31.PNG\" />\n</p>\n\n<p>2) Set <strong>Launch Template Name:</strong> Bastion-Host-Recovery\n3) Select <strong>AMI:</strong> Amazon Linux 2 AMI\n4) Select <strong>Instance Type:</strong> t2.micro</p>\n\n<p align=\"center\">\n <img src=\"blob/lab-2-pic-15.PNG\" />\n</p>\n\n<p>5) Set <strong>Key pair:</strong> bastion-keys (Previously Created)\n6) Set <strong>Security Groups</strong> Bastion-SecG (Previously Created)</p>\n\n<p align=\"center\">\n <img src=\"blob/lab-2-pic-16.PNG\" />\n</p>\n\n<p>7) Under <strong>advanced details</strong>, select <strong>IAM Instance profile:</strong> Bastion-ENI (Previously Created)</p>\n\n<p align=\"center\">\n <img src=\"blob/lab-2-pic-17.PNG\" />\n</p>\n\n<h3 id=\"user-data\">User Data</h3>\n\n<p>When you launch an instance in Amazon EC2, you have the option of passing user data to the instance that can be used to perform common \nautomated configuration tasks and even run scripts after the instance has started</p>\n\n<p><strong>We will add a script for the launch template to use during automated EC2 instance creation. The script will use AWS CLI to attach\nan elastic IP to it. This ensures the bastion host that is created to always have the same IP for access</strong></p>\n\n<p>8) Under <strong>User data</strong>, Add the following script. \n**Note: Change &lt; Your ElasticIP ID &gt; to your previously created elastic IP’s resource ID. **</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>#!\nINSTANCE_ID=`/usr/bin/curl -s http://169.254.169.254/latest/meta-data/instance-id`\\\naws ec2 associate-address --instance-id $INSTANCE_ID --allocation-id &lt;Your ElasticIP ID&gt; --allow-reassociation --region ap-southeast-1\n</code></pre>  </div></div>\n\n<p>9) Click <strong>Create launch template</strong></p>\n\n<p align=\"center\">\n <img src=\"blob/lab-2-pic-18.PNG\" />\n</p>\n<h2 id=\"auto-scaling-group\">Auto Scaling Group</h2>\n\n<p>1) In <strong>EC2</strong> service page, navigate to <strong>Auto Scaling Group</strong> page and click on <strong>Create An Auto Scaling group</strong></p>\n\n<p align=\"center\">\n <img src=\"blob/lab-2-pic-19.PNG\" />\n</p>\n\n<p>2) Set <strong>Auto Scaling Group name:</strong> Bastion-Host-Recovery\n3) Select <strong>Launch Template:</strong> Bastion-Host-Recovery\n4) Click <strong>Next</strong></p>\n\n<p align=\"center\">\n <img src=\"blob/lab-2-pic-20.PNG\" />\n</p>\n\n<p>5) Select <strong>VPC:</strong> 3-tier-vpc\n6) Select <strong>Subnets:</strong> public-subnet-1 &amp; public-subnet-2\n7) Click <strong>Next</strong></p>\n\n<p align=\"center\">\n <img src=\"blob/lab-2-pic-21.PNG\" />\n</p>\n\n<p>8) Leave Options Default\n9) Click <strong>Next</strong></p>\n\n<p align=\"center\">\n <img src=\"blob/lab-2-pic-22.PNG\" />\n</p>\n\n<p>10) Leave Options Default\n11) Click <strong>Next</strong></p>\n\n<p><strong>Note: Setting 1/1/1 capacity will ensure there is at least one bastion host up at a time</strong></p>\n\n<p align=\"center\">\n <img src=\"blob/lab-2-pic-23.PNG\" />\n</p>\n\n<p>12) Leave Options Default\n13) Click <strong>Next</strong></p>\n\n<p align=\"center\">\n <img src=\"blob/lab-2-pic-24.PNG\" />\n</p>\n\n<p>14) <strong>Optional</strong> to add <strong>Tag:</strong> Bastion-ASG\n15) Click <strong>Next</strong></p>\n\n<p align=\"center\">\n <img src=\"blob/lab-2-pic-25.PNG\" />\n</p>\n\n<p>16) Click <strong>Create Auto Scaling Group</strong></p>\n\n<p align=\"center\">\n <img src=\"blob/lab-2-pic-26.PNG\" />\n</p>\n\n<h2 id=\"private-key-forwarding-puttypageant\">Private Key Forwarding (Putty/Pageant)</h2>\n<p>For Secure Connection to Linux Instances Running in a Private Amazon VPC through Bastion Host\nhttps://aws.amazon.com/blogs/security/securely-connect-to-linux-instances-running-in-a-private-amazon-vpc/</p>\n\n<p>Download Putty &amp; Pageant:\nhttps://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html</p>\n\n<p>You can SSH to any Instances as long as the private key is added into <strong>Pageant</strong></p>\n\n<p>1) Open <strong>Pageant</strong>, add <strong>private key (ppk)</strong> assigned to EC2 Instances in Launch Template</p>\n\n<p align=\"center\">\n <img src=\"blob/lab-2-pic-27.PNG\" />\n</p>\n\n<p>2) Open <strong>Putty</strong>, Under <strong>Conncetion &gt; SSH &gt; Auth</strong>, Allow <strong>Agent-forwarding</strong> in Putty</p>\n\n<p align=\"center\">\n <img src=\"blob/lab-2-pic-28.PNG\" />\n</p>\n\n<p>3) In <strong>Putty</strong>, Under <strong>Session</strong>, Specify <strong>Hostname</strong> as the ec2-user@{bastion host elastic IP}</p>\n\n<p align=\"center\">\n <img src=\"blob/lab-2-pic-29.PNG\" />\n</p>\n\n<p>4) Click <strong>Open</strong></p>\n\n<p align=\"center\">\n <img src=\"blob/lab-2-pic-30.PNG\" />\n</p>\n","dir":"/Three%20Tier%20Architecture/Lab%202/","name":"readme.md","path":"Three Tier Architecture/Lab 2/readme.md","url":"/Three%20Tier%20Architecture/Lab%202/"},{"sort":2,"permalink":"/2nd%20Page/","layout":"default","title":"Second Page TBA","content":"<h1 id=\"second-page-tba\">Second Page TBA</h1>\n","dir":"/2nd%20Page/","name":"readme.md","path":"2nd Page/readme.md","url":"/2nd%20Page/"}]